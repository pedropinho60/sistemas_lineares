use sistemas_lineares_e_interpolacao_polinomial::interpolation::{
    interpolacao_sistema_linear,
};

fn main() -> Result<(), String> {
    // Função usada: 1 / (1 + 25x²)

    // let n = 5;
    // let xs = vec![-1.0 , -0.6, -0.2, 0.2, 0.6, 1.0];
    // let ys = vec![0.03846154, 0.1, 0.5, 0.5, 0.1, 0.03846154];

    let n = 10;
    let xs = vec![-1.0 , -0.8, -0.6, -0.4, -0.2,  0. ,  0.2,  0.4,  0.6,  0.8,  1.];
    let ys = vec![0.03846154, 0.05882353, 0.1, 0.2, 0.5, 1.0, 0.5, 0.2, 0.1, 0.05882353, 0.03846154];

    // let n = 15;
    // let xs = vec![
    //     -1.0, -0.86666667, -0.73333333, -0.6, -0.46666667,
    //     -0.33333333, -0.2, -0.06666667, 0.06666667, 0.2,
    //     0.33333333, 0.46666667, 0.6, 0.73333333, 0.86666667, 1.0
    // ];
    //
    // let ys = vec![
    //     0.03846154, 0.0505618, 0.06923077, 0.1, 0.15517241,
    //     0.26470588, 0.5, 0.9, 0.9, 0.5,
    //     0.26470588, 0.15517241, 0.1, 0.06923077, 0.0505618, 0.03846154
    // ];




    // ---------------- Test Vectors ------------------------------
    let xtest = vec![
        -1.0, -0.95, -0.9, -0.85, -0.8, -0.75, -0.7, -0.65, -0.6, -0.55,
        -0.5, -0.45, -0.4, -0.35, -0.3, -0.25, -0.2, -0.15, -0.1, -0.05,
         0.0,
         0.05, 0.1, 0.15, 0.2, 0.25, 0.3, 0.35, 0.4, 0.45,
         0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9, 0.95, 1.0
    ];

    let ytest = vec![
        0.03846154, 0.04278075, 0.04705882, 0.05116415, 0.05524862, 0.05970149, 0.06535948, 0.07194245, 0.1,
        0.09433962, 0.13793103, 0.16460905, 0.2, 0.23952096, 0.27777778, 0.30769231, 0.38461538,
        0.47058824, 0.58139535, 0.71684588, 1.0,
        0.71684588, 0.58139535, 0.47058824, 0.38461538, 0.30769231, 0.27777778, 0.23952096,
        0.2, 0.16460905, 0.13793103, 0.09433962, 0.1, 0.07194245, 0.06535948, 0.05970149,
        0.05524862, 0.05116415, 0.04705882, 0.04278075, 0.03846154
    ];

    let p1 = interpolacao_sistema_linear(&xs, &ys)?;
    println!("P(0) = {}", p1(0.0));
    // let p2 = intepolacao_lagrange(&xs, &ys);
    // let p3 = newton_diferencas_divididas(&xs, &ys);

    // println!("n = {}", n);
    // println!("{:<8} {:<12} {:<12}", "x", "y", "p(x)");
    // println!("{:-<34}", "");
    //
    // for i in 0..xtest.len() {
    //     println!(
    //         "{:<8} {:<12.6} {:<12.6}",
    //         format!("{: >+6.2}", xtest[i]), // leading space for positives, signs aligned
    //         ytest[i],
    //         p1(xtest[i])
    //     );
    // }

    Ok(())
}
